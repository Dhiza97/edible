// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                  String     @id @default(uuid())
  name                String
  email               String     @unique
  password            String
  likes               Like[]
  image               String?
  cart                CartItem[]
  orders              Order[]
  verifyOtp           String     @default("")
  verifiedOtpExpireAt DateTime?  @default(dbgenerated())
  isVerified          Boolean    @default(false)
  resetOtp            String     @default("")
  resetOtpExpireAt    DateTime?  @default(dbgenerated())
}

model CartItem {
  id        String   @id @default(uuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  productId String
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  quantity  Int      @default(1)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Product {
  id            String      @id @default(uuid())
  name          String
  image         String
  price         Float
  discountPrice Float?
  category      String
  stock         Int         @default(0)
  isFeatured    Boolean     @default(false)
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  cartItems     CartItem[]
  orderItems    OrderItem[]
}

model Order {
  id           String      @id @default(uuid())
  userId       String
  user         User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  totalAmount  Float
  status       String      @default("pending")
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt
  orderItems   OrderItem[]
  payment      Payment?
  paymentId    String?
  shippingInfo Shipping?
  shippingId   String?
}

model OrderItem {
  id        String   @id @default(uuid())
  orderId   String
  order     Order    @relation(fields: [orderId], references: [id], onDelete: Cascade)
  productId String
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  quantity  Int      @default(1)
  price     Float // Store the price at the time of purchase
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Payment {
  id            String   @id @default(uuid())
  orderId       String   @unique
  order         Order    @relation(fields: [orderId], references: [id], onDelete: Cascade)
  transactionId String   @unique
  amount        Float
  paymentMethod String // "card", "bank transfer", "paypal", "cash on delivery"
  status        String   @default("pending")
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

model Shipping {
  id        String   @id @default(uuid())
  orderId   String   @unique
  order     Order    @relation(fields: [orderId], references: [id], onDelete: Cascade)
  address   String
  city      String
  state     String
  country   String
  phone     String
  status    String   @default("processing")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Like {
  id        String   @id @default(uuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
}
