generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                  String     @id @default(uuid())
  name                String
  email               String     @unique
  password            String
  image               String?
  isVerified          Boolean    @default(false)
  resetOtp            String     @default("")
  resetOtpExpireAt    DateTime?
  verifiedOtpExpireAt DateTime?
  verifyOtp           String     @default("")
  cart                CartItem[]
  likes               Like[]
  orders              Order[]
}

model CartItem {
  id        String   @id @default(uuid())
  userId    String
  productId String
  quantity  Int      @default(1)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Product {
  id            String      @id @default(uuid())
  name          String
  image         String
  price         Float
  discountPrice Float?
  category      String
  stock         Int         @default(0)
  isFeatured    Boolean     @default(false)
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  cartItems     CartItem[]
  likes         Like[]
  orderItems    OrderItem[]
}

model Order {
  id          String   @id @default(uuid())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  userId      String
  totalAmount Float

  // Relations
  orderItems OrderItem[]
  payments   Payment?
  shipping   Shipping?
  User       User        @relation(fields: [userId], references: [id])
}

model OrderItem {
  id        String @id @default(uuid())
  orderId   String
  productId String
  quantity  Int
  price     Float

  // Relation with Order
  order   Order   @relation(fields: [orderId], references: [id], onDelete: Cascade)
  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)
}

model Payment {
  id            String   @id @default(uuid())
  orderId       String   @unique
  transactionId String   @unique
  amount        Float
  paymentMethod String
  status        String   @default("pending")
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  order         Order    @relation(fields: [orderId], references: [id], onDelete: Cascade)
}

model Shipping {
  id            String   @id @default(uuid())
  orderId       String   @unique
  city          String
  state         String
  country       String
  phone         String
  status        String   @default("processing")
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  email         String
  firstName     String
  lastName      String
  paymentMethod String   @default("cod")
  street        String
  order         Order    @relation(fields: [orderId], references: [id], onDelete: Cascade)
}

model Like {
  id        String   @id @default(uuid())
  userId    String
  createdAt DateTime @default(now())
  productId String
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}
